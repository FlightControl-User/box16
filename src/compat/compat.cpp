#include "compat.h"

#if defined(_MSC_VER)
#include <windows.h>

void usleep(__int64 usec)
{
	HANDLE        timer;
	LARGE_INTEGER ft;

	ft.QuadPart = -(10 * usec); // Convert to 100 nanosecond interval, negative value indicates relative time

	timer = CreateWaitableTimer(NULL, TRUE, NULL);
	if (timer != NULL) {
		SetWaitableTimer(timer, &ft, 0, NULL, NULL, 0);
		WaitForSingleObject(timer, INFINITE);
		CloseHandle(timer);
	}
}

constexpr uint8_t
parity(uint8_t i)
{
	return i == 0 ? 0 : (((i & 1) + parity(i >> 1)) & 1);
}

constexpr static const uint8_t parity_table[256] = {
    parity(0x00), parity(0x01), parity(0x02), parity(0x03), parity(0x04), parity(0x05), parity(0x06), parity(0x07), parity(0x08), parity(0x09), parity(0x0a), parity(0x0b), parity(0x0c), parity(0x0d), parity(0x0e), parity(0x0f),
    parity(0x10), parity(0x11), parity(0x12), parity(0x13), parity(0x14), parity(0x15), parity(0x16), parity(0x17), parity(0x18), parity(0x19), parity(0x1a), parity(0x1b), parity(0x1c), parity(0x1d), parity(0x1e), parity(0x1f),
    parity(0x20), parity(0x21), parity(0x22), parity(0x23), parity(0x24), parity(0x25), parity(0x26), parity(0x27), parity(0x28), parity(0x29), parity(0x2a), parity(0x2b), parity(0x2c), parity(0x2d), parity(0x2e), parity(0x2f),
    parity(0x30), parity(0x31), parity(0x32), parity(0x33), parity(0x34), parity(0x35), parity(0x36), parity(0x37), parity(0x38), parity(0x39), parity(0x3a), parity(0x3b), parity(0x3c), parity(0x3d), parity(0x3e), parity(0x3f),
    parity(0x40), parity(0x41), parity(0x42), parity(0x43), parity(0x44), parity(0x45), parity(0x46), parity(0x47), parity(0x48), parity(0x49), parity(0x4a), parity(0x4b), parity(0x4c), parity(0x4d), parity(0x4e), parity(0x4f),
    parity(0x50), parity(0x51), parity(0x52), parity(0x53), parity(0x54), parity(0x55), parity(0x56), parity(0x57), parity(0x58), parity(0x59), parity(0x5a), parity(0x5b), parity(0x5c), parity(0x5d), parity(0x5e), parity(0x5f),
    parity(0x60), parity(0x61), parity(0x62), parity(0x63), parity(0x64), parity(0x65), parity(0x66), parity(0x67), parity(0x68), parity(0x69), parity(0x6a), parity(0x6b), parity(0x6c), parity(0x6d), parity(0x6e), parity(0x6f),
    parity(0x70), parity(0x71), parity(0x72), parity(0x73), parity(0x74), parity(0x75), parity(0x76), parity(0x77), parity(0x78), parity(0x79), parity(0x7a), parity(0x7b), parity(0x7c), parity(0x7d), parity(0x7e), parity(0x7f),
    parity(0x80), parity(0x81), parity(0x82), parity(0x83), parity(0x84), parity(0x85), parity(0x86), parity(0x87), parity(0x88), parity(0x89), parity(0x8a), parity(0x8b), parity(0x8c), parity(0x8d), parity(0x8e), parity(0x8f),
    parity(0x90), parity(0x91), parity(0x92), parity(0x93), parity(0x94), parity(0x95), parity(0x96), parity(0x97), parity(0x98), parity(0x99), parity(0x9a), parity(0x9b), parity(0x9c), parity(0x9d), parity(0x9e), parity(0x9f),
    parity(0xa0), parity(0xa1), parity(0xa2), parity(0xa3), parity(0xa4), parity(0xa5), parity(0xa6), parity(0xa7), parity(0xa8), parity(0xa9), parity(0xaa), parity(0xab), parity(0xac), parity(0xad), parity(0xae), parity(0xaf),
    parity(0xb0), parity(0xb1), parity(0xb2), parity(0xb3), parity(0xb4), parity(0xb5), parity(0xb6), parity(0xb7), parity(0xb8), parity(0xb9), parity(0xba), parity(0xbb), parity(0xbc), parity(0xbd), parity(0xbe), parity(0xbf),
    parity(0xc0), parity(0xc1), parity(0xc2), parity(0xc3), parity(0xc4), parity(0xc5), parity(0xc6), parity(0xc7), parity(0xc8), parity(0xc9), parity(0xca), parity(0xcb), parity(0xcc), parity(0xcd), parity(0xce), parity(0xcf),
    parity(0xd0), parity(0xd1), parity(0xd2), parity(0xd3), parity(0xd4), parity(0xd5), parity(0xd6), parity(0xd7), parity(0xd8), parity(0xd9), parity(0xda), parity(0xdb), parity(0xdc), parity(0xdd), parity(0xde), parity(0xdf),
    parity(0xe0), parity(0xe1), parity(0xe2), parity(0xe3), parity(0xe4), parity(0xe5), parity(0xe6), parity(0xe7), parity(0xe8), parity(0xe9), parity(0xea), parity(0xeb), parity(0xec), parity(0xed), parity(0xee), parity(0xef),
    parity(0xf0), parity(0xf1), parity(0xf2), parity(0xf3), parity(0xf4), parity(0xf5), parity(0xf6), parity(0xf7), parity(0xf8), parity(0xf9), parity(0xfa), parity(0xfb), parity(0xfc), parity(0xfd), parity(0xfe), parity(0xff)};

uint8_t
__builtin_parity(uint8_t value)
{
	return parity_table[value];
}
#endif